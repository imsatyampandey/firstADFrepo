{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "SatyamSharedADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/storedprocedure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_logPipelineExecutionDetails]",
							"storedProcedureParameters": {
								"DataFactoryName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineTriggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineTriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "Datetime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "onpremServer",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Task adf 101"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-28T11:19:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/task folder name')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Var folder Structure",
							"value": {
								"value": "@concat(formatDateTime(utcNow(),'yyyy'),'/',formatDateTime(utcNow(),'MM'),'/',formatDateTime(utcNow(),'dd'),'/',formatDateTime(utcNow(),'hh:mm:ss'))\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {
									"folderstructure": {
										"value": "@variables('Var folder Structure')",
										"type": "Expression"
									},
									"filename": {
										"value": "@concat(formatDateTime(utcNow(),'yyyy'),'-',formatDateTime(utcNow(),'MM'),'-',formatDateTime(utcNow(),'dd'),'-',formatDateTime(utcNow(),'hh:mm:ss'))\n",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "pipelinelog",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_logPipelineExecutionDetails]",
							"storedProcedureParameters": {
								"DataFactoryName": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								},
								"execstatus": {
									"value": {
										"value": "@activity('Copy data1').output.ExecutionDetails[0].status",
										"type": "Expression"
									},
									"type": "String"
								},
								"failedfile": {
									"value": {
										"value": "@sub(activity('Copy data1').output.filesread,activity('Copy data1').output.fileswritten)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineTriggerName": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineTriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"totalfileRead": {
									"value": {
										"value": "@activity('Copy data1').output.fileswritten",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "onpremServer",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Var folder Structure": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Task adf 101"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/upsert')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"id"
									]
								},
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "lastmodifiedDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "lastloadDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlStagingtabl",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "targettbl",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Task adf 101"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DynamicSourceOnprem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "onpremServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SrcSchema": {
						"type": "string"
					},
					"SrcTable": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().srcSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().srcTable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lookup_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "onpremServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "TableName",
						"type": "nvarchar"
					},
					{
						"name": "DeltaFlag",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LastUpdateDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "lookupTable"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "onpremServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"dbname": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/deltalookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "onpremServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "SourceSchema",
						"type": "nvarchar"
					},
					{
						"name": "SourceTable",
						"type": "nvarchar"
					},
					{
						"name": "TargetSchema",
						"type": "nvarchar"
					},
					{
						"name": "TargetTable",
						"type": "nvarchar"
					},
					{
						"name": "DeltaFlag",
						"type": "bit"
					},
					{
						"name": "LastLoadDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DeltaLookUp"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/deltasourcetbl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "onpremServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablname": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().tablname",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/onPremSourceTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "onpremServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "studentId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "studentName",
						"type": "varchar"
					},
					{
						"name": "stream",
						"type": "varchar"
					},
					{
						"name": "marks",
						"type": "int",
						"precision": 10
					},
					{
						"name": "createDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "updateDate",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Student"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BronzeLayer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delta lookup table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from lookup",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "deltatraget_table",
								"type": "DatasetReference",
								"parameters": {
									"tartbl": "lookup"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Delta lookup table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Delta lookup table').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Delta Flag validator",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().deltaflag,true)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Full load Copy",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "select * from @{item().sourceTable}",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"preCopyScript": {
															"value": "IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '@{item().targettable}' and TABLE_SCHEMA = '@{item().targetschema}')\n    TRUNCATE table @{item().targettable};",
															"type": "Expression"
														},
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DynamicSourceOnprem",
														"type": "DatasetReference",
														"parameters": {
															"SrcSchema": {
																"value": "@item().sourceSchema",
																"type": "Expression"
															},
															"SrcTable": {
																"value": "@item().sourceTable",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DynamicTargetTableOnAzSql",
														"type": "DatasetReference",
														"parameters": {
															"TarSchema": "@item().TargetSchema",
															"TarTable": "@item().TargetTable"
														}
													}
												]
											},
											{
												"name": "Update last update for full load",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Full load Copy",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[sp_updateLoadDate]",
													"storedProcedureParameters": {
														"TargetSchema": {
															"value": {
																"value": "@item().targetschema",
																"type": "Expression"
															},
															"type": "String"
														},
														"TargetTable": {
															"value": {
																"value": "@item().targettable",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "satyamDB2",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "error log full load",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Full load Copy",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[sp_logPipelineExecutionDetails]",
													"storedProcedureParameters": {
														"DataFactoryName": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"execstatus": {
															"value": {
																"value": "@activity('Full load Copy').output.executionDetails[0].status ",
																"type": "Expression"
															},
															"type": "String"
														},
														"failedfile": {
															"value": {
																"value": "@sub(activity('Full load Copy').output.dataWritten,activity('Full load Copy').output.dataRead)",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"PipelineName": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"PipelineRunId": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"PipelineTriggerName": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"PipelineTriggerTime": {
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"totalfileRead": {
															"value": {
																"value": "@activity('Full load Copy').output.filesread",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "satyamDB2",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "trigger mail for",
												"type": "WebActivity",
												"dependsOn": [
													{
														"activity": "Full load Copy",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"url": "https://prod-54.eastus.logic.azure.com:443/workflows/3d34f20a455b468c90d316a0c8700c82/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=83txJxGBkhoEx9imHBR2DnH2g_BSdxnRnN82XvF7dSA",
													"method": "POST",
													"headers": {
														"Content-Type": {
															"value": "application/json",
															"type": "Expression"
														}
													},
													"body": {
														"value": "{\n\"Pipeline\": \"@{pipeline().Pipeline}\",\n\"ErrorMessage\": \"@{activity('Full load Copy').Error.Message}\",\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"Runid\":\"@{pipeline().RunId}\"\n\n}",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Copy data Source to Stage",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "select * from @{item().sourceTable} where added_date > '@{item().lastloaddate}'",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": true,
													"stagingSettings": {
														"linkedServiceName": {
															"referenceName": "ADLS",
															"type": "LinkedServiceReference"
														},
														"path": "newstagingfordelta"
													},
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DynamicSourceOnprem",
														"type": "DatasetReference",
														"parameters": {
															"SrcSchema": {
																"value": "@item().sourceSchema",
																"type": "Expression"
															},
															"SrcTable": "@item().sourceTable"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DynamicTargetTableOnAzSql",
														"type": "DatasetReference",
														"parameters": {
															"TarSchema": {
																"value": "@item().targetschema",
																"type": "Expression"
															},
															"TarTable": {
																"value": "@item().targettable",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "update last load date",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Copy data Source to Stage",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[sp_updateLoadDate]",
													"storedProcedureParameters": {
														"TargetSchema": {
															"value": {
																"value": "@item().targetschema",
																"type": "Expression"
															},
															"type": "String"
														},
														"TargetTable": {
															"value": {
																"value": "@item().targettable",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "satyamDB2",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "error log",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Copy data Source to Stage",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[sp_logPipelineExecutionDetails]",
													"storedProcedureParameters": {
														"DataFactoryName": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"execstatus": {
															"value": {
																"value": "@activity('Copy data Source to Stage').output.executionDetails[0].status ",
																"type": "Expression"
															},
															"type": "String"
														},
														"failedfile": {
															"value": {
																"value": "@sub(activity('Copy data Source to Stage').output.dataWritten,activity('Copy data Source to Stage').output.dataRead)",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"PipelineName": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"PipelineRunId": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"PipelineTriggerName": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"PipelineTriggerTime": {
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"totalfileRead": {
															"value": {
																"value": "@activity('Copy data Source to Stage').output.filesread",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "satyamDB2",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "trigger mail for deltaload",
												"type": "WebActivity",
												"dependsOn": [
													{
														"activity": "Copy data Source to Stage",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"url": "https://prod-54.eastus.logic.azure.com:443/workflows/3d34f20a455b468c90d316a0c8700c82/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=83txJxGBkhoEx9imHBR2DnH2g_BSdxnRnN82XvF7dSA",
													"method": "POST",
													"headers": {
														"Content-Type": {
															"value": "application/json",
															"type": "Expression"
														}
													},
													"body": {
														"value": "{\n\"Pipeline\": \"@{pipeline().Pipeline}\",\n\"ErrorMessage\": \"@{activity('Copy data Source to Stage').Error.Message}\",\n\"DataFactoryName\": \"@{pipeline().DataFactory}\",\n\"Runid\":\"@{pipeline().RunId}\"\n\n}",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Ingest layer"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DynamicSourceOnprem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BronzeLayer_with currenttime and execution column')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delta lookup table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from deltalookup",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "deltatraget_table",
								"type": "DatasetReference",
								"parameters": {
									"tartbl": "deltalookup"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "timestamp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Delta lookup table').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Delta Flag validator",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().deltaflag,true)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Full load Copy",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"additionalColumns": [
															{
																"name": "CurrentTimeStamp",
																"value": {
																	"value": "@variables('CurrTime')",
																	"type": "Expression"
																}
															},
															{
																"name": "ExecutionTime",
																"value": {
																	"value": "@pipeline().TriggerTime",
																	"type": "Expression"
																}
															}
														],
														"sqlReaderQuery": {
															"value": "select * from @{item().sourceTable}",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"preCopyScript": {
															"value": "IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '@{item().targettable}' and TABLE_SCHEMA = '@{item().targetschema}')\n    TRUNCATE table @{item().targettable};",
															"type": "Expression"
														},
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DynamicSourceOnprem",
														"type": "DatasetReference",
														"parameters": {
															"SrcSchema": {
																"value": "@item().sourceSchema",
																"type": "Expression"
															},
															"SrcTable": {
																"value": "@item().sourceTable",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DynamicTargetTableOnAzSql",
														"type": "DatasetReference",
														"parameters": {
															"TarSchema": "@item().TargetSchema",
															"TarTable": "@item().TargetTable"
														}
													}
												]
											},
											{
												"name": "Update last update for full load",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Full load Copy",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[sp_updateLoadDate]",
													"storedProcedureParameters": {
														"TargetSchema": {
															"value": {
																"value": "@item().targetschema",
																"type": "Expression"
															},
															"type": "String"
														},
														"TargetTable": {
															"value": {
																"value": "@item().targettable",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "satyamDB2",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Copy data Source to Stage",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"additionalColumns": [
															{
																"name": "CurrentTimeStamp",
																"value": {
																	"value": "@variables('CurrTime')",
																	"type": "Expression"
																}
															},
															{
																"name": "ExecutionTime",
																"value": {
																	"value": "@pipeline().TriggerTime",
																	"type": "Expression"
																}
															}
														],
														"sqlReaderQuery": {
															"value": "select * from @{item().sourceTable} where added_date > '@{item().lastloaddate}'",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": true,
													"stagingSettings": {
														"linkedServiceName": {
															"referenceName": "ADLS",
															"type": "LinkedServiceReference"
														},
														"path": "newstagingfordelta"
													},
													"translator": {
														"type": "TabularTranslator",
														"mappings": [
															{
																"source": {
																	"name": "CurrentTimeStamp"
																},
																"sink": {
																	"name": "CurrentTimeStamp"
																}
															},
															{
																"source": {
																	"name": "ExecutionTime"
																},
																"sink": {
																	"name": "ExecutionTime"
																}
															}
														],
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DynamicSourceOnprem",
														"type": "DatasetReference",
														"parameters": {
															"SrcSchema": {
																"value": "@item().sourceSchema",
																"type": "Expression"
															},
															"SrcTable": "@item().sourceTable"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DynamicTargetTableOnAzSql",
														"type": "DatasetReference",
														"parameters": {
															"TarSchema": {
																"value": "@item().targetschema",
																"type": "Expression"
															},
															"TarTable": {
																"value": "@item().targettable",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "update last load date",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Copy data Source to Stage",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[sp_updateLoadDate]",
													"storedProcedureParameters": {
														"TargetSchema": {
															"value": {
																"value": "@item().targetschema",
																"type": "Expression"
															},
															"type": "String"
														},
														"TargetTable": {
															"value": {
																"value": "@item().targettable",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "satyamDB2",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "timestamp",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Delta lookup table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "CurrTime",
							"value": {
								"value": "@utcnow()",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"CurrTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Ingest layer"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DynamicSourceOnprem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delta and full load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select * from lookuptable",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Lookup_table",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachtable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Table').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "checking delta flag",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().deltaflag, 1)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Copy data full load",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"preCopyScript": {
															"value": "IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '@{item().tablename}')\n    TRUNCATE table @{item().tablename};",
															"type": "Expression"
														},
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "deltasourcetbl",
														"type": "DatasetReference",
														"parameters": {
															"tablname": {
																"value": "@item().tablename",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "deltatraget_table",
														"type": "DatasetReference",
														"parameters": {
															"tartbl": "@item().tablename"
														}
													}
												]
											},
											{
												"name": "update delta table last updatedate",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Copy data full load",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "update lookuptable \nset lastupdatedate = getdate()\nwhere tablename='@{item().tablename}';\n\n\nselect getdate();\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "Lookup_table",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Lookup Incremental load",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "select Lastupdatedate as date_comp from lookuptable where TableName = '@{item().Tablename}';",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "Lookup_table",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": true
												}
											},
											{
												"name": "Copy data Incremental load",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Lookup Incremental load",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "select * from @{item().TableName} where added_date > '@{activity('Lookup Incremental load').output.firstrow.date_comp}'",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "deltasourcetbl",
														"type": "DatasetReference",
														"parameters": {
															"tablname": "@item().tablename"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "deltatraget_table",
														"type": "DatasetReference",
														"parameters": {
															"tartbl": "@item().tablename"
														}
													}
												]
											},
											{
												"name": "Incremental Load Target Table Max Added Date",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Copy data Incremental load",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "select max(added_date) as upd_date from @{item().tablename}",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "deltasourcetbl",
														"type": "DatasetReference",
														"parameters": {
															"tablname": "@item().tablename"
														}
													}
												}
											},
											{
												"name": "Incremental Load Update lookup Table Dates",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Incremental Load Target Table Max Added Date",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "update lookuptable\nset lastupdatedate= '@{activity('Incremental Load Target Table Max Added Date').output.firstRow.upd_date}' where tablename='@{item().tablename}';\nselect getdate();\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "Lookup_table",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"gettime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "deltaload"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Lookup_table')]",
				"[concat(variables('factoryId'), '/datasets/deltasourcetbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delta and full load_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select * from lookuptable",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Lookup_table",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachtable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Table').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "checking delta flag",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().deltaflag, 1)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Copy data full load",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"preCopyScript": {
															"value": "IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '@{item().tablename}')\n    TRUNCATE table @{item().tablename};",
															"type": "Expression"
														},
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "deltasourcetbl",
														"type": "DatasetReference",
														"parameters": {
															"tablname": {
																"value": "@item().tablename",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "deltatraget_table",
														"type": "DatasetReference",
														"parameters": {
															"tartbl": "@item().tablename"
														}
													}
												]
											},
											{
												"name": "update delta table last updatedate",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Copy data full load",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "update lookuptable \nset lastupdatedate = getdate()\nwhere tablename='@{item().tablename}';\n\n\nselect getdate();\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "Lookup_table",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Lookup Incremental load",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "select Lastupdatedate as date_comp from lookuptable where TableName = '@{item().Tablename}';",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "Lookup_table",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": true
												}
											},
											{
												"name": "Copy data Incremental load",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Lookup Incremental load",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "select * from @{item().tablename}\nwhere added_date > '@{activity('Lookup Incremental load').output.firstRow.date_comp}';\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "deltasourcetbl",
														"type": "DatasetReference",
														"parameters": {
															"tablname": "@item().tablename"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "deltatraget_table",
														"type": "DatasetReference",
														"parameters": {
															"tartbl": "@item().tablename"
														}
													}
												]
											},
											{
												"name": "Incremental Load Target Table Max Added Date",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Copy data Incremental load",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "select max(added_date) as upd_date from @{item().tablename}",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "deltasourcetbl",
														"type": "DatasetReference",
														"parameters": {
															"tablname": "@item().tablename"
														}
													}
												}
											},
											{
												"name": "Incremental Load Update lookup Table Dates",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Incremental Load Target Table Max Added Date",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "update lookuptable\nset lastupdatedate= '@{activity('Incremental Load Target Table Max Added Date').output.firstRow.upd_date}' where tablename='@{item().tablename}';\nselect getdate();\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "Lookup_table",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"gettime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "deltaload"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Lookup_table')]",
				"[concat(variables('factoryId'), '/datasets/deltasourcetbl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/incrementalLoadTask')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lookup old watermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT waterMarkVal\nFROM [dbo].[WaterMark]\nWHERE tableName = '@{pipeline().parameters.finalTableName}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "watermarkTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "lookup New watermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT max(@{pipeline().parameters.waterMarkCol}) as NewWaterMarkVal from @{pipeline().parameters.srcTableName}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "onPremSourceTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy data to staging",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "lookup old watermark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "lookup New watermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select * from @{pipeline().parameters.srcTableName}\nwhere @{pipeline().parameters.waterMarkCol} > \n'@{activity('lookup old watermark').output.firstRow.waterMarkVal}' \nand @{pipeline().parameters.waterMarkCol} <= \n'@{activity('lookup New watermark').output.firstRow.NewwaterMarkVal}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "truncate table @{pipeline().parameters.stgTableName}",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureDataLakeStorage1",
										"type": "LinkedServiceReference"
									},
									"path": "imp/log"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "onPremSourceTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlStagingtabl",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "merge data from stage to target",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data to staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_upsert_student]"
						},
						"linkedServiceName": {
							"referenceName": "satyamDB2",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "update watermark table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "merge data from stage to target",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_Updatewatermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@activity('lookup New watermark').output.firstRow.NewWaterMarkVal",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.finalTableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "satyamDB2",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"finalTableName": {
						"type": "string",
						"defaultValue": "Student"
					},
					"srcTableName": {
						"type": "string",
						"defaultValue": "Student"
					},
					"waterMarkCol": {
						"type": "string",
						"defaultValue": "updateDate"
					},
					"stgTableName": {
						"type": "string",
						"defaultValue": "stgStudent"
					},
					"storedProcUpsert": {
						"type": "string",
						"defaultValue": "sp_upsert_student"
					},
					"storedProcWaterMark": {
						"type": "string",
						"defaultValue": "sp_Updatewatermark"
					}
				},
				"folder": {
					"name": "Task adf 101"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/onPremSourceTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/parametierizedPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select * from employee",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {
									"dbname": {
										"value": "@pipeline().parameters.tbalname",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.filename",
										"type": "Expression"
									},
									"folderstructure": {
										"value": "@variables('vartbalname')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"tbalname": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"variables": {
					"vartbalname": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Task adf 101"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-28T10:58:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dailyrun')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "upsert",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "incrementalLoadTask",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-03-02T13:12:00Z",
						"endTime": "2023-03-04T13:12:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/upsert')]",
				"[concat(variables('factoryId'), '/pipelines/incrementalLoadTask')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/everyLastSaturday')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "parametierizedPipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2023-03-25T12:17:00",
						"endTime": "2023-03-26T12:17:00",
						"timeZone": "India Standard Time",
						"schedule": {
							"monthlyOccurrences": [
								{
									"day": "Saturday",
									"occurrence": -1
								}
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/parametierizedPipeline')]"
			]
		}
	]
}